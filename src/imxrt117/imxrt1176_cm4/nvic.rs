#![allow(non_snake_case, non_upper_case_globals)]
#![allow(non_camel_case_types)]
//! Nested Vectored Interrupt Controller

pub use crate::imxrt117::peripherals::nvic::Instance;
pub use crate::imxrt117::peripherals::nvic::{RegisterBlock, ResetValues};

pub use crate::imxrt117::peripherals::nvic::{
    NVICIABR0, NVICIABR1, NVICIABR2, NVICIABR3, NVICICER0, NVICICER1, NVICICER2, NVICICER3,
    NVICICPR0, NVICICPR1, NVICICPR2, NVICICPR3, NVICIP0, NVICIP1, NVICIP10, NVICIP100, NVICIP101,
    NVICIP102, NVICIP103, NVICIP104, NVICIP105, NVICIP11, NVICIP12, NVICIP13, NVICIP14, NVICIP15,
    NVICIP16, NVICIP17, NVICIP18, NVICIP19, NVICIP2, NVICIP20, NVICIP21, NVICIP22, NVICIP23,
    NVICIP24, NVICIP25, NVICIP26, NVICIP27, NVICIP28, NVICIP29, NVICIP3, NVICIP30, NVICIP31,
    NVICIP32, NVICIP33, NVICIP34, NVICIP35, NVICIP36, NVICIP37, NVICIP38, NVICIP39, NVICIP4,
    NVICIP40, NVICIP41, NVICIP42, NVICIP43, NVICIP44, NVICIP45, NVICIP46, NVICIP47, NVICIP48,
    NVICIP49, NVICIP5, NVICIP50, NVICIP51, NVICIP52, NVICIP53, NVICIP54, NVICIP55, NVICIP56,
    NVICIP57, NVICIP58, NVICIP59, NVICIP6, NVICIP60, NVICIP61, NVICIP62, NVICIP63, NVICIP64,
    NVICIP65, NVICIP66, NVICIP67, NVICIP68, NVICIP69, NVICIP7, NVICIP70, NVICIP71, NVICIP72,
    NVICIP73, NVICIP74, NVICIP75, NVICIP76, NVICIP77, NVICIP78, NVICIP79, NVICIP8, NVICIP80,
    NVICIP81, NVICIP82, NVICIP83, NVICIP84, NVICIP85, NVICIP86, NVICIP87, NVICIP88, NVICIP89,
    NVICIP9, NVICIP90, NVICIP91, NVICIP92, NVICIP93, NVICIP94, NVICIP95, NVICIP96, NVICIP97,
    NVICIP98, NVICIP99, NVICISER0, NVICISER1, NVICISER2, NVICISER3, NVICISPR0, NVICISPR1,
    NVICISPR2, NVICISPR3, NVICSTIR,
};
#[cfg(not(feature = "nosync"))]
use core::sync::atomic::{AtomicBool, Ordering};

/// The NVIC peripheral instance.
#[cfg(not(feature = "doc"))]
pub type NVIC = Instance<0>;

/// The NVIC peripheral instance.
///
/// This is a new type only for documentation purposes. When
/// compiling for a target, this is defined as
///
/// ```rust
/// pub type NVIC = Instance<0>;
/// ```
#[cfg(feature = "doc")]
pub struct NVIC {
    #[allow(unused)] // Only for documentation generation.
    addr: u32,
}

impl crate::private::Sealed for NVIC {}
impl crate::Valid for NVIC {
    fn take() -> Option<Self> {
        <NVIC>::take()
    }
    fn release(self) {
        <NVIC>::release(self);
    }
    unsafe fn steal() -> Self {
        <NVIC>::steal()
    }
}

#[cfg(not(feature = "nosync"))]
#[allow(renamed_and_removed_lints)]
#[allow(private_no_mangle_statics)]
#[no_mangle]
static NVIC_TAKEN: AtomicBool = AtomicBool::new(false);

/// Access functions for the NVIC peripheral instance
#[cfg(not(feature = "nosync"))]
impl NVIC {
    const INSTANCE: Self = Self {
        addr: 0xe000e100,
        #[cfg(not(feature = "doc"))]
        intrs: &[
            crate::interrupt::DMA0_DMA16,
            crate::interrupt::DMA1_DMA17,
            crate::interrupt::DMA2_DMA18,
            crate::interrupt::DMA3_DMA19,
            crate::interrupt::DMA4_DMA20,
            crate::interrupt::DMA5_DMA21,
            crate::interrupt::DMA6_DMA22,
            crate::interrupt::DMA7_DMA23,
            crate::interrupt::DMA8_DMA24,
            crate::interrupt::DMA9_DMA25,
            crate::interrupt::DMA10_DMA26,
            crate::interrupt::DMA11_DMA27,
            crate::interrupt::DMA12_DMA28,
            crate::interrupt::DMA13_DMA29,
            crate::interrupt::DMA14_DMA30,
            crate::interrupt::DMA15_DMA31,
            crate::interrupt::DMA_ERROR,
            crate::interrupt::Reserved33,
            crate::interrupt::Reserved34,
            crate::interrupt::CORE,
            crate::interrupt::LPUART1,
            crate::interrupt::LPUART2,
            crate::interrupt::LPUART3,
            crate::interrupt::LPUART4,
            crate::interrupt::LPUART5,
            crate::interrupt::LPUART6,
            crate::interrupt::LPUART7,
            crate::interrupt::LPUART8,
            crate::interrupt::LPUART9,
            crate::interrupt::LPUART10,
            crate::interrupt::LPUART11,
            crate::interrupt::LPUART12,
            crate::interrupt::LPI2C1,
            crate::interrupt::LPI2C2,
            crate::interrupt::LPI2C3,
            crate::interrupt::LPI2C4,
            crate::interrupt::LPI2C5,
            crate::interrupt::LPI2C6,
            crate::interrupt::LPSPI1,
            crate::interrupt::LPSPI2,
            crate::interrupt::LPSPI3,
            crate::interrupt::LPSPI4,
            crate::interrupt::LPSPI5,
            crate::interrupt::LPSPI6,
            crate::interrupt::CAN1,
            crate::interrupt::CAN1_ERROR,
            crate::interrupt::CAN2,
            crate::interrupt::CAN2_ERROR,
            crate::interrupt::CAN3,
            crate::interrupt::CAN3_ERROR,
            crate::interrupt::Reserved66,
            crate::interrupt::KPP,
            crate::interrupt::Reserved68,
            crate::interrupt::GPR_IRQ,
            crate::interrupt::eLCDIF,
            crate::interrupt::LCDIFv2,
            crate::interrupt::CSI,
            crate::interrupt::PXP,
            crate::interrupt::MIPI_CSI,
            crate::interrupt::MIPI_DSI,
            crate::interrupt::GPU2D,
            crate::interrupt::GPIO12_Combined_0_15,
            crate::interrupt::GPIO12_Combined_16_31,
            crate::interrupt::DAC,
            crate::interrupt::KEY_MANAGER,
            crate::interrupt::WDOG2,
            crate::interrupt::SNVS_HP_NON_TZ,
            crate::interrupt::SNVS_HP_TZ,
            crate::interrupt::SNVS_PULSE_EVENT,
            crate::interrupt::CAAM_IRQ0,
            crate::interrupt::CAAM_IRQ1,
            crate::interrupt::CAAM_IRQ2,
            crate::interrupt::CAAM_IRQ3,
            crate::interrupt::CAAM_RECORVE_ERRPR,
            crate::interrupt::CAAM_RTIC,
            crate::interrupt::CDOG,
            crate::interrupt::SAI1,
            crate::interrupt::SAI2,
            crate::interrupt::SAI3_RX,
            crate::interrupt::SAI3_TX,
            crate::interrupt::SAI4_RX,
            crate::interrupt::SAI4_TX,
            crate::interrupt::SPDIF,
            crate::interrupt::TMPSNS_INT,
            crate::interrupt::TMPSNS_LOW_HIGH,
            crate::interrupt::TMPSNS_PANIC,
            crate::interrupt::LPSR_LP8_BROWNOUT,
            crate::interrupt::LPSR_LP0_BROWNOUT,
            crate::interrupt::ADC1,
            crate::interrupt::ADC2,
            crate::interrupt::USBPHY1,
            crate::interrupt::USBPHY2,
            crate::interrupt::RDC,
            crate::interrupt::GPIO13_Combined_0_31,
            crate::interrupt::DCIC1,
            crate::interrupt::DCIC2,
            crate::interrupt::ASRC,
            crate::interrupt::FLEXRAM_ECC,
            crate::interrupt::GPIO7_8_9_10_11,
            crate::interrupt::GPIO1_Combined_0_15,
            crate::interrupt::GPIO1_Combined_16_31,
            crate::interrupt::GPIO2_Combined_0_15,
            crate::interrupt::GPIO2_Combined_16_31,
            crate::interrupt::GPIO3_Combined_0_15,
            crate::interrupt::GPIO3_Combined_16_31,
            crate::interrupt::GPIO4_Combined_0_15,
            crate::interrupt::GPIO4_Combined_16_31,
            crate::interrupt::GPIO5_Combined_0_15,
            crate::interrupt::GPIO5_Combined_16_31,
            crate::interrupt::FLEXIO1,
            crate::interrupt::FLEXIO2,
            crate::interrupt::WDOG1,
            crate::interrupt::RTWDOG4,
            crate::interrupt::EWM,
            crate::interrupt::OCOTP_READ_FUSE_ERROR,
            crate::interrupt::OCOTP_READ_DONE_ERROR,
            crate::interrupt::GPC,
            crate::interrupt::MUB,
            crate::interrupt::GPT1,
            crate::interrupt::GPT2,
            crate::interrupt::GPT3,
            crate::interrupt::GPT4,
            crate::interrupt::GPT5,
            crate::interrupt::GPT6,
            crate::interrupt::PWM1_0,
            crate::interrupt::PWM1_1,
            crate::interrupt::PWM1_2,
            crate::interrupt::PWM1_3,
            crate::interrupt::PWM1_FAULT,
            crate::interrupt::FLEXSPI2,
            crate::interrupt::SEMC,
            crate::interrupt::USDHC1,
            crate::interrupt::USDHC2,
            crate::interrupt::USB_OTG2,
            crate::interrupt::USB_OTG1,
            crate::interrupt::ENET,
            crate::interrupt::ENET_1588_Timer,
            crate::interrupt::ENET_1G_MAC0_Tx_Rx_1,
            crate::interrupt::ENET_1G_MAC0_Tx_Rx_2,
            crate::interrupt::ENET_1G,
            crate::interrupt::ENET_1G_1588_Timer,
            crate::interrupt::XBAR1_IRQ_0_1,
            crate::interrupt::XBAR1_IRQ_2_3,
            crate::interrupt::ADC_ETC_IRQ0,
            crate::interrupt::ADC_ETC_IRQ1,
            crate::interrupt::ADC_ETC_IRQ2,
            crate::interrupt::ADC_ETC_IRQ3,
            crate::interrupt::ADC_ETC_ERROR_IRQ,
            crate::interrupt::PIT1,
            crate::interrupt::PIT2,
            crate::interrupt::ACMP1,
            crate::interrupt::ACMP2,
            crate::interrupt::ACMP3,
            crate::interrupt::ACMP4,
            crate::interrupt::Reserved177,
            crate::interrupt::Reserved178,
            crate::interrupt::Reserved179,
            crate::interrupt::Reserved180,
            crate::interrupt::ENC1,
            crate::interrupt::ENC2,
            crate::interrupt::ENC3,
            crate::interrupt::ENC4,
            crate::interrupt::Reserved185,
            crate::interrupt::Reserved186,
            crate::interrupt::TMR1,
            crate::interrupt::TMR2,
            crate::interrupt::TMR3,
            crate::interrupt::TMR4,
            crate::interrupt::SEMA4_CP0,
            crate::interrupt::SEMA4_CP1,
            crate::interrupt::PWM2_0,
            crate::interrupt::PWM2_1,
            crate::interrupt::PWM2_2,
            crate::interrupt::PWM2_3,
            crate::interrupt::PWM2_FAULT,
            crate::interrupt::PWM3_0,
            crate::interrupt::PWM3_1,
            crate::interrupt::PWM3_2,
            crate::interrupt::PWM3_3,
            crate::interrupt::PWM3_FAULT,
            crate::interrupt::PWM4_0,
            crate::interrupt::PWM4_1,
            crate::interrupt::PWM4_2,
            crate::interrupt::PWM4_3,
            crate::interrupt::PWM4_FAULT,
            crate::interrupt::Reserved208,
            crate::interrupt::Reserved209,
            crate::interrupt::Reserved210,
            crate::interrupt::Reserved211,
            crate::interrupt::Reserved212,
            crate::interrupt::Reserved213,
            crate::interrupt::Reserved214,
            crate::interrupt::Reserved215,
            crate::interrupt::PDM_HWVAD_EVENT,
            crate::interrupt::PDM_HWVAD_ERROR,
            crate::interrupt::PDM_EVENT,
            crate::interrupt::PDM_ERROR,
            crate::interrupt::EMVSIM1,
            crate::interrupt::EMVSIM2,
            crate::interrupt::MECC1_INT,
            crate::interrupt::MECC1_FATAL_INT,
            crate::interrupt::MECC2_INT,
            crate::interrupt::MECC2_FATAL_INT,
            crate::interrupt::XECC_FLEXSPI1_INT,
            crate::interrupt::XECC_FLEXSPI1_FATAL_INT,
            crate::interrupt::XECC_FLEXSPI2_INT,
            crate::interrupt::XECC_FLEXSPI2_FATAL_INT,
            crate::interrupt::XECC_SEMC_INT,
            crate::interrupt::XECC_SEMC_FATAL_INT,
            crate::interrupt::ENET_QOS,
            crate::interrupt::ENET_QOS_PMT,
        ],
    };

    /// Reset values for each field in NVIC
    pub const reset: ResetValues = ResetValues {
        NVICISER0: 0x00000000,
        NVICISER1: 0x00000000,
        NVICISER2: 0x00000000,
        NVICISER3: 0x00000000,
        NVICICER0: 0x00000000,
        NVICICER1: 0x00000000,
        NVICICER2: 0x00000000,
        NVICICER3: 0x00000000,
        NVICISPR0: 0x00000000,
        NVICISPR1: 0x00000000,
        NVICISPR2: 0x00000000,
        NVICISPR3: 0x00000000,
        NVICICPR0: 0x00000000,
        NVICICPR1: 0x00000000,
        NVICICPR2: 0x00000000,
        NVICICPR3: 0x00000000,
        NVICIABR0: 0x00000000,
        NVICIABR1: 0x00000000,
        NVICIABR2: 0x00000000,
        NVICIABR3: 0x00000000,
        NVICIP0: 0x00000000,
        NVICIP1: 0x00000000,
        NVICIP2: 0x00000000,
        NVICIP3: 0x00000000,
        NVICIP4: 0x00000000,
        NVICIP5: 0x00000000,
        NVICIP6: 0x00000000,
        NVICIP7: 0x00000000,
        NVICIP8: 0x00000000,
        NVICIP9: 0x00000000,
        NVICIP10: 0x00000000,
        NVICIP11: 0x00000000,
        NVICIP12: 0x00000000,
        NVICIP13: 0x00000000,
        NVICIP14: 0x00000000,
        NVICIP15: 0x00000000,
        NVICIP16: 0x00000000,
        NVICIP17: 0x00000000,
        NVICIP18: 0x00000000,
        NVICIP19: 0x00000000,
        NVICIP20: 0x00000000,
        NVICIP21: 0x00000000,
        NVICIP22: 0x00000000,
        NVICIP23: 0x00000000,
        NVICIP24: 0x00000000,
        NVICIP25: 0x00000000,
        NVICIP26: 0x00000000,
        NVICIP27: 0x00000000,
        NVICIP28: 0x00000000,
        NVICIP29: 0x00000000,
        NVICIP30: 0x00000000,
        NVICIP31: 0x00000000,
        NVICIP32: 0x00000000,
        NVICIP33: 0x00000000,
        NVICIP34: 0x00000000,
        NVICIP35: 0x00000000,
        NVICIP36: 0x00000000,
        NVICIP37: 0x00000000,
        NVICIP38: 0x00000000,
        NVICIP39: 0x00000000,
        NVICIP40: 0x00000000,
        NVICIP41: 0x00000000,
        NVICIP42: 0x00000000,
        NVICIP43: 0x00000000,
        NVICIP44: 0x00000000,
        NVICIP45: 0x00000000,
        NVICIP46: 0x00000000,
        NVICIP47: 0x00000000,
        NVICIP48: 0x00000000,
        NVICIP49: 0x00000000,
        NVICIP50: 0x00000000,
        NVICIP51: 0x00000000,
        NVICIP52: 0x00000000,
        NVICIP53: 0x00000000,
        NVICIP54: 0x00000000,
        NVICIP55: 0x00000000,
        NVICIP56: 0x00000000,
        NVICIP57: 0x00000000,
        NVICIP58: 0x00000000,
        NVICIP59: 0x00000000,
        NVICIP60: 0x00000000,
        NVICIP61: 0x00000000,
        NVICIP62: 0x00000000,
        NVICIP63: 0x00000000,
        NVICIP64: 0x00000000,
        NVICIP65: 0x00000000,
        NVICIP66: 0x00000000,
        NVICIP67: 0x00000000,
        NVICIP68: 0x00000000,
        NVICIP69: 0x00000000,
        NVICIP70: 0x00000000,
        NVICIP71: 0x00000000,
        NVICIP72: 0x00000000,
        NVICIP73: 0x00000000,
        NVICIP74: 0x00000000,
        NVICIP75: 0x00000000,
        NVICIP76: 0x00000000,
        NVICIP77: 0x00000000,
        NVICIP78: 0x00000000,
        NVICIP79: 0x00000000,
        NVICIP80: 0x00000000,
        NVICIP81: 0x00000000,
        NVICIP82: 0x00000000,
        NVICIP83: 0x00000000,
        NVICIP84: 0x00000000,
        NVICIP85: 0x00000000,
        NVICIP86: 0x00000000,
        NVICIP87: 0x00000000,
        NVICIP88: 0x00000000,
        NVICIP89: 0x00000000,
        NVICIP90: 0x00000000,
        NVICIP91: 0x00000000,
        NVICIP92: 0x00000000,
        NVICIP93: 0x00000000,
        NVICIP94: 0x00000000,
        NVICIP95: 0x00000000,
        NVICIP96: 0x00000000,
        NVICIP97: 0x00000000,
        NVICIP98: 0x00000000,
        NVICIP99: 0x00000000,
        NVICIP100: 0x00000000,
        NVICIP101: 0x00000000,
        NVICIP102: 0x00000000,
        NVICIP103: 0x00000000,
        NVICIP104: 0x00000000,
        NVICIP105: 0x00000000,
        NVICSTIR: 0x00000000,
    };

    /// Safe access to NVIC
    ///
    /// This function returns `Some(Instance)` if this instance is not
    /// currently taken, and `None` if it is. This ensures that if you
    /// do get `Some(Instance)`, you are ensured unique access to
    /// the peripheral and there cannot be data races (unless other
    /// code uses `unsafe`, of course). You can then pass the
    /// `Instance` around to other functions as required. When you're
    /// done with it, you can call `release(instance)` to return it.
    ///
    /// `Instance` itself dereferences to a `RegisterBlock`, which
    /// provides access to the peripheral's registers.
    #[inline]
    pub fn take() -> Option<Self> {
        let taken = NVIC_TAKEN.swap(true, Ordering::SeqCst);
        if taken {
            None
        } else {
            Some(Self::INSTANCE)
        }
    }

    /// Release exclusive access to NVIC
    ///
    /// This function allows you to return an `Instance` so that it
    /// is available to `take()` again. This function will panic if
    /// you return a different `Instance` or if this instance is not
    /// already taken.
    #[inline]
    pub fn release(_: Self) {
        let taken = NVIC_TAKEN.swap(false, Ordering::SeqCst);
        assert!(taken, "Released a peripheral which was not taken");
    }

    /// Unsafely steal NVIC
    ///
    /// This function is similar to take() but forcibly takes the
    /// Instance, marking it as taken irregardless of its previous
    /// state.
    #[inline]
    pub unsafe fn steal() -> Self {
        NVIC_TAKEN.store(true, Ordering::SeqCst);
        Self::INSTANCE
    }
}

impl NVIC {
    /// The interrupts associated with NVIC
    #[cfg(not(feature = "doc"))]
    pub const INTERRUPTS: [crate::Interrupt; 211] = [
        crate::interrupt::DMA0_DMA16,
        crate::interrupt::DMA1_DMA17,
        crate::interrupt::DMA2_DMA18,
        crate::interrupt::DMA3_DMA19,
        crate::interrupt::DMA4_DMA20,
        crate::interrupt::DMA5_DMA21,
        crate::interrupt::DMA6_DMA22,
        crate::interrupt::DMA7_DMA23,
        crate::interrupt::DMA8_DMA24,
        crate::interrupt::DMA9_DMA25,
        crate::interrupt::DMA10_DMA26,
        crate::interrupt::DMA11_DMA27,
        crate::interrupt::DMA12_DMA28,
        crate::interrupt::DMA13_DMA29,
        crate::interrupt::DMA14_DMA30,
        crate::interrupt::DMA15_DMA31,
        crate::interrupt::DMA_ERROR,
        crate::interrupt::Reserved33,
        crate::interrupt::Reserved34,
        crate::interrupt::CORE,
        crate::interrupt::LPUART1,
        crate::interrupt::LPUART2,
        crate::interrupt::LPUART3,
        crate::interrupt::LPUART4,
        crate::interrupt::LPUART5,
        crate::interrupt::LPUART6,
        crate::interrupt::LPUART7,
        crate::interrupt::LPUART8,
        crate::interrupt::LPUART9,
        crate::interrupt::LPUART10,
        crate::interrupt::LPUART11,
        crate::interrupt::LPUART12,
        crate::interrupt::LPI2C1,
        crate::interrupt::LPI2C2,
        crate::interrupt::LPI2C3,
        crate::interrupt::LPI2C4,
        crate::interrupt::LPI2C5,
        crate::interrupt::LPI2C6,
        crate::interrupt::LPSPI1,
        crate::interrupt::LPSPI2,
        crate::interrupt::LPSPI3,
        crate::interrupt::LPSPI4,
        crate::interrupt::LPSPI5,
        crate::interrupt::LPSPI6,
        crate::interrupt::CAN1,
        crate::interrupt::CAN1_ERROR,
        crate::interrupt::CAN2,
        crate::interrupt::CAN2_ERROR,
        crate::interrupt::CAN3,
        crate::interrupt::CAN3_ERROR,
        crate::interrupt::Reserved66,
        crate::interrupt::KPP,
        crate::interrupt::Reserved68,
        crate::interrupt::GPR_IRQ,
        crate::interrupt::eLCDIF,
        crate::interrupt::LCDIFv2,
        crate::interrupt::CSI,
        crate::interrupt::PXP,
        crate::interrupt::MIPI_CSI,
        crate::interrupt::MIPI_DSI,
        crate::interrupt::GPU2D,
        crate::interrupt::GPIO12_Combined_0_15,
        crate::interrupt::GPIO12_Combined_16_31,
        crate::interrupt::DAC,
        crate::interrupt::KEY_MANAGER,
        crate::interrupt::WDOG2,
        crate::interrupt::SNVS_HP_NON_TZ,
        crate::interrupt::SNVS_HP_TZ,
        crate::interrupt::SNVS_PULSE_EVENT,
        crate::interrupt::CAAM_IRQ0,
        crate::interrupt::CAAM_IRQ1,
        crate::interrupt::CAAM_IRQ2,
        crate::interrupt::CAAM_IRQ3,
        crate::interrupt::CAAM_RECORVE_ERRPR,
        crate::interrupt::CAAM_RTIC,
        crate::interrupt::CDOG,
        crate::interrupt::SAI1,
        crate::interrupt::SAI2,
        crate::interrupt::SAI3_RX,
        crate::interrupt::SAI3_TX,
        crate::interrupt::SAI4_RX,
        crate::interrupt::SAI4_TX,
        crate::interrupt::SPDIF,
        crate::interrupt::TMPSNS_INT,
        crate::interrupt::TMPSNS_LOW_HIGH,
        crate::interrupt::TMPSNS_PANIC,
        crate::interrupt::LPSR_LP8_BROWNOUT,
        crate::interrupt::LPSR_LP0_BROWNOUT,
        crate::interrupt::ADC1,
        crate::interrupt::ADC2,
        crate::interrupt::USBPHY1,
        crate::interrupt::USBPHY2,
        crate::interrupt::RDC,
        crate::interrupt::GPIO13_Combined_0_31,
        crate::interrupt::DCIC1,
        crate::interrupt::DCIC2,
        crate::interrupt::ASRC,
        crate::interrupt::FLEXRAM_ECC,
        crate::interrupt::GPIO7_8_9_10_11,
        crate::interrupt::GPIO1_Combined_0_15,
        crate::interrupt::GPIO1_Combined_16_31,
        crate::interrupt::GPIO2_Combined_0_15,
        crate::interrupt::GPIO2_Combined_16_31,
        crate::interrupt::GPIO3_Combined_0_15,
        crate::interrupt::GPIO3_Combined_16_31,
        crate::interrupt::GPIO4_Combined_0_15,
        crate::interrupt::GPIO4_Combined_16_31,
        crate::interrupt::GPIO5_Combined_0_15,
        crate::interrupt::GPIO5_Combined_16_31,
        crate::interrupt::FLEXIO1,
        crate::interrupt::FLEXIO2,
        crate::interrupt::WDOG1,
        crate::interrupt::RTWDOG4,
        crate::interrupt::EWM,
        crate::interrupt::OCOTP_READ_FUSE_ERROR,
        crate::interrupt::OCOTP_READ_DONE_ERROR,
        crate::interrupt::GPC,
        crate::interrupt::MUB,
        crate::interrupt::GPT1,
        crate::interrupt::GPT2,
        crate::interrupt::GPT3,
        crate::interrupt::GPT4,
        crate::interrupt::GPT5,
        crate::interrupt::GPT6,
        crate::interrupt::PWM1_0,
        crate::interrupt::PWM1_1,
        crate::interrupt::PWM1_2,
        crate::interrupt::PWM1_3,
        crate::interrupt::PWM1_FAULT,
        crate::interrupt::FLEXSPI2,
        crate::interrupt::SEMC,
        crate::interrupt::USDHC1,
        crate::interrupt::USDHC2,
        crate::interrupt::USB_OTG2,
        crate::interrupt::USB_OTG1,
        crate::interrupt::ENET,
        crate::interrupt::ENET_1588_Timer,
        crate::interrupt::ENET_1G_MAC0_Tx_Rx_1,
        crate::interrupt::ENET_1G_MAC0_Tx_Rx_2,
        crate::interrupt::ENET_1G,
        crate::interrupt::ENET_1G_1588_Timer,
        crate::interrupt::XBAR1_IRQ_0_1,
        crate::interrupt::XBAR1_IRQ_2_3,
        crate::interrupt::ADC_ETC_IRQ0,
        crate::interrupt::ADC_ETC_IRQ1,
        crate::interrupt::ADC_ETC_IRQ2,
        crate::interrupt::ADC_ETC_IRQ3,
        crate::interrupt::ADC_ETC_ERROR_IRQ,
        crate::interrupt::PIT1,
        crate::interrupt::PIT2,
        crate::interrupt::ACMP1,
        crate::interrupt::ACMP2,
        crate::interrupt::ACMP3,
        crate::interrupt::ACMP4,
        crate::interrupt::Reserved177,
        crate::interrupt::Reserved178,
        crate::interrupt::Reserved179,
        crate::interrupt::Reserved180,
        crate::interrupt::ENC1,
        crate::interrupt::ENC2,
        crate::interrupt::ENC3,
        crate::interrupt::ENC4,
        crate::interrupt::Reserved185,
        crate::interrupt::Reserved186,
        crate::interrupt::TMR1,
        crate::interrupt::TMR2,
        crate::interrupt::TMR3,
        crate::interrupt::TMR4,
        crate::interrupt::SEMA4_CP0,
        crate::interrupt::SEMA4_CP1,
        crate::interrupt::PWM2_0,
        crate::interrupt::PWM2_1,
        crate::interrupt::PWM2_2,
        crate::interrupt::PWM2_3,
        crate::interrupt::PWM2_FAULT,
        crate::interrupt::PWM3_0,
        crate::interrupt::PWM3_1,
        crate::interrupt::PWM3_2,
        crate::interrupt::PWM3_3,
        crate::interrupt::PWM3_FAULT,
        crate::interrupt::PWM4_0,
        crate::interrupt::PWM4_1,
        crate::interrupt::PWM4_2,
        crate::interrupt::PWM4_3,
        crate::interrupt::PWM4_FAULT,
        crate::interrupt::Reserved208,
        crate::interrupt::Reserved209,
        crate::interrupt::Reserved210,
        crate::interrupt::Reserved211,
        crate::interrupt::Reserved212,
        crate::interrupt::Reserved213,
        crate::interrupt::Reserved214,
        crate::interrupt::Reserved215,
        crate::interrupt::PDM_HWVAD_EVENT,
        crate::interrupt::PDM_HWVAD_ERROR,
        crate::interrupt::PDM_EVENT,
        crate::interrupt::PDM_ERROR,
        crate::interrupt::EMVSIM1,
        crate::interrupt::EMVSIM2,
        crate::interrupt::MECC1_INT,
        crate::interrupt::MECC1_FATAL_INT,
        crate::interrupt::MECC2_INT,
        crate::interrupt::MECC2_FATAL_INT,
        crate::interrupt::XECC_FLEXSPI1_INT,
        crate::interrupt::XECC_FLEXSPI1_FATAL_INT,
        crate::interrupt::XECC_FLEXSPI2_INT,
        crate::interrupt::XECC_FLEXSPI2_FATAL_INT,
        crate::interrupt::XECC_SEMC_INT,
        crate::interrupt::XECC_SEMC_FATAL_INT,
        crate::interrupt::ENET_QOS,
        crate::interrupt::ENET_QOS_PMT,
    ];

    /// The interrupts associated with NVIC
    ///
    /// Note: the values are invalid for a documentation build.
    #[cfg(feature = "doc")]
    pub const INTERRUPTS: [crate::Interrupt; 0] = [];
}

/// Raw pointer to NVIC
///
/// Dereferencing this is unsafe because you are not ensured unique
/// access to the peripheral, so you may encounter data races with
/// other users of this peripheral. It is up to you to ensure you
/// will not cause data races.
///
/// This constant is provided for ease of use in unsafe code: you can
/// simply call for example `write_reg!(gpio, GPIOA, ODR, 1);`.
pub const NVIC: *const RegisterBlock = 0xe000e100 as *const _;
